[{"/Users/terranadams/Desktop/React/time-tracking-app/src/index.js":"1","/Users/terranadams/Desktop/React/time-tracking-app/src/App.js":"2","/Users/terranadams/Desktop/React/time-tracking-app/src/reportWebVitals.js":"3","/Users/terranadams/Desktop/React/time-tracking-app/src/TimersDashboard.js":"4","/Users/terranadams/Desktop/React/time-tracking-app/src/Helpers.js":"5","/Users/terranadams/Desktop/React/time-tracking-app/src/EditableTimerList.js":"6","/Users/terranadams/Desktop/React/time-tracking-app/src/ToggleableTimerForm.js":"7","/Users/terranadams/Desktop/React/time-tracking-app/src/EditableTimer.js":"8","/Users/terranadams/Desktop/React/time-tracking-app/src/TimerForm.js":"9","/Users/terranadams/Desktop/React/time-tracking-app/src/Timer.js":"10","/Users/terranadams/Desktop/React/time-tracking-app/src/TimerActionButton.js":"11"},{"size":500,"mtime":1607015748999,"results":"12","hashOfConfig":"13"},{"size":707,"mtime":1607059589074,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1607015749001,"results":"15","hashOfConfig":"13"},{"size":4397,"mtime":1607093043666,"results":"16","hashOfConfig":"13"},{"size":1195,"mtime":1607043669108,"results":"17","hashOfConfig":"13"},{"size":1376,"mtime":1607058557503,"results":"18","hashOfConfig":"13"},{"size":1995,"mtime":1607059392258,"results":"19","hashOfConfig":"13"},{"size":2183,"mtime":1607058495169,"results":"20","hashOfConfig":"13"},{"size":2588,"mtime":1607055233768,"results":"21","hashOfConfig":"13"},{"size":2586,"mtime":1607059471710,"results":"22","hashOfConfig":"13"},{"size":524,"mtime":1607058154024,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"10gj6xt",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/terranadams/Desktop/React/time-tracking-app/src/index.js",[],["49","50"],"/Users/terranadams/Desktop/React/time-tracking-app/src/App.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/reportWebVitals.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/TimersDashboard.js",["51"],"import React, { Component } from 'react';\nimport { v4 as uuidv4 } from \"uuid\";\nimport  helpers  from './Helpers';\n\nimport EditableTimerList from \"./EditableTimerList\";\nimport ToggleableTimerForm from \"./ToggleableTimerForm\";\n\n/* \nOnce you understand state, you can see how props act as its one-way data pipeline. \nstate is managed in some select parent components and then that data flows down through children as props. \nIf state is updated, the component managing that state re-renders by calling render(). \nThis, in turn, causes any of its children to re-render as well. And the children of those children. \nAnd on and on down the chain.\n*/\n\nexport default class TimersDashboard extends Component {\n    state = {\n      timers: [],\n    };\n\n    handleCreateFormSubmit = (timer) => { // This inserts new timer into our state, and get auto-rendered\n        this.createTimer(timer);\n      };\n    \n      handleEditFormSubmit = (attrs) => { // This handler runs a function below (updateTimer) for submitting an edit to state\n        this.updateTimer(attrs);\n      };\n\n      handleTrashClick = (timerId) => { // This handler runs a function defined here that deletes a specific timer with it's id as the attribute\n        this.deleteTimer(timerId); // This handler is handled as a value in a prop by EditableTimerList\n      };\n    \n      handleStartClick = (timerId) => {  // These handlers have been waiting on handler props being passed up from the very bottom to finally call us\n        this.startTimer(timerId);\n      };\n      \n      handleStopClick = (timerId) => {     // These handlers have been waiting on handler props being passed up from the very bottom to finally call us\n        this.stopTimer(timerId);\n      };\n\n      createTimer = (timer) => {   // This creates the clock I think\n        const t = helpers.newTimer(timer);\n        this.setState({\n          timers: this.state.timers.concat(t),\n        });\n      };\n  \n      deleteTimer = (timerId) => { // Self explanatory\n        this.setState({\n          timers: this.state.timers.filter(t => t.id !== timerId),\n        });\n      };\n\n      updateTimer = (attrs) => {  // This updates the timer when the TimerForm gets edited and submitted\n        this.setState({\n          timers: this.state.timers.map((timer) => {\n            if (timer.id === attrs.id) {\n              return Object.assign({}, timer, {\n                title: attrs.title,\n                project: attrs.project,\n              });\n            } else {\n              return timer;\n            }\n          }),\n        });\n      };\n\n      startTimer = (timerId) => { // Self explanatory\n        const now = Date.now();\n        this.setState({\n          timers: this.state.timers.map((timer) => {\n            if (timer.id === timerId) {\n              return Object.assign({}, timer, {\n                runningSince: now,\n              });\n            } else {\n              return timer;\n            }\n          }),\n        });\n      };\n    \n      stopTimer = (timerId) => { // Self explanatory\n        const now = Date.now();\n        this.setState({\n          timers: this.state.timers.map((timer) => {\n            if (timer.id === timerId) {\n              const lastElapsed = now - timer.runningSince;\n              return Object.assign({}, timer, {\n                elapsed: timer.elapsed + lastElapsed,\n                runningSince: null,\n              });\n            } else {\n              return timer;\n            }\n          }),\n        });\n      };\n      render() {\n        return (\n          <div className='ui three column centered grid'>\n            <div className='column'>\n            <EditableTimerList\n            timers={this.state.timers}\n            onFormSubmit={this.handleEditFormSubmit}\n            onTrashClick={this.handleTrashClick}\n            onStartClick={this.handleStartClick}  // We made iiiiiit! (props bubbled up by EditableTimerList's children from the bottom to be used by handlers created in this component) \n            onStopClick={this.handleStopClick}    // We made iiiiiit! (props bubbled up by EditableTimerList's children from the bottom to be used by handlers created in this component)\n          />\n\n          <ToggleableTimerForm \n                onFormSubmit={this.handleCreateFormSubmit} // This runs the function that adds the new timer to state\n              />\n            </div>\n          </div>\n        );\n      }\n  }","/Users/terranadams/Desktop/React/time-tracking-app/src/Helpers.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/EditableTimerList.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/ToggleableTimerForm.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/EditableTimer.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/TimerForm.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/Timer.js",[],"/Users/terranadams/Desktop/React/time-tracking-app/src/TimerActionButton.js",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":16,"nodeType":"60","messageId":"61","endLine":2,"endColumn":22},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'uuidv4' is defined but never used.","Identifier","unusedVar",["64"],["65"],"no-global-assign","no-unsafe-negation"]